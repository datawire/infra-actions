// Code generated by MockGen. DO NOT EDIT.
// Source: internal/aws/iface.go

// Package mock_aws is a generated GoMock package.
package mock_aws

import (
	context "context"
	reflect "reflect"

	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	gomock "github.com/golang/mock/gomock"
)

// MockAwsEc2ClientInterface is a mock of AwsEc2ClientInterface interface.
type MockAwsEc2ClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAwsEc2ClientInterfaceMockRecorder
}

// MockAwsEc2ClientInterfaceMockRecorder is the mock recorder for MockAwsEc2ClientInterface.
type MockAwsEc2ClientInterfaceMockRecorder struct {
	mock *MockAwsEc2ClientInterface
}

// NewMockAwsEc2ClientInterface creates a new mock instance.
func NewMockAwsEc2ClientInterface(ctrl *gomock.Controller) *MockAwsEc2ClientInterface {
	mock := &MockAwsEc2ClientInterface{ctrl: ctrl}
	mock.recorder = &MockAwsEc2ClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwsEc2ClientInterface) EXPECT() *MockAwsEc2ClientInterfaceMockRecorder {
	return m.recorder
}

// DescribeInstances mocks base method.
func (m *MockAwsEc2ClientInterface) DescribeInstances(ctx context.Context, params *ec2.DescribeInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances.
func (mr *MockAwsEc2ClientInterfaceMockRecorder) DescribeInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockAwsEc2ClientInterface)(nil).DescribeInstances), varargs...)
}

// RunInstances mocks base method.
func (m *MockAwsEc2ClientInterface) RunInstances(ctx context.Context, params *ec2.RunInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RunInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunInstances", varargs...)
	ret0, _ := ret[0].(*ec2.RunInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInstances indicates an expected call of RunInstances.
func (mr *MockAwsEc2ClientInterfaceMockRecorder) RunInstances(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInstances", reflect.TypeOf((*MockAwsEc2ClientInterface)(nil).RunInstances), varargs...)
}
