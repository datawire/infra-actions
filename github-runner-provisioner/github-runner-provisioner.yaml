## Mapping
---
apiVersion: getambassador.io/v2
kind: Mapping
metadata:
  annotations: {}
  name: github-runner-provisioner
  labels:
    app: github-runner-provisioner
spec:
  host: sw.bakerstreet.io
  prefix: /github-runner-provisioner/
  rewrite: ""
  service: github-runner-provisioner:80
  timeout_ms: 60000

## Service
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    a8r.io/chat: '#team-infra'
    a8r.io/description: "Mac M1 provisioner for GitHub jobs in Ambassador Labs repositories"
    a8r.io/logs: ""
    a8r.io/owner: Infrastructure
    a8r.io/repository: https://github.com/datawire/infra-actions
    a8r.io/runbook: ""
    a8r.io/uptime: ""
  name: github-runner-provisioner
  labels:
    app: github-runner-provisioner
spec:
  type: ClusterIP
  selector:
    app: github-runner-provisioner
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

## Github Runner Provisioner Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: github-runner-provisioner
  labels:
    app: github-runner-provisioner
spec:
  replicas: 2
  selector:
    matchLabels:
      app: github-runner-provisioner
  template:
    metadata:
      labels:
        app: github-runner-provisioner
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - github-runner-provisioner
                topologyKey: kubernetes.io/hostname
      containers:
      - name: github-runner-provisioner
        image: golang:1.18.7
        imagePullPolicy: IfNotPresent
        command: ["go", "run", "."]
        workingDir: "/src"
        ports:
        - name: http
          containerPort: 8080
        volumeMounts:
        - name: code-root
          mountPath: "/src"
        - name: internal-aws
          mountPath: "/src/internal/aws"
        - name: internal-monitoring
          mountPath: "/src/internal/monitoring"
        - name: internal-utils
          mountPath: "/src/internal/utils"
        env:
        - name: AWS_REGION
          value: us-east-1
        envFrom:
          - secretRef:
              name: github-runner-provisioner-secrets
        startupProbe:
          httpGet:
            path: /github-runner-provisioner/healthz
            port: http
          failureThreshold: 36
          periodSeconds: 5
        livenessProbe:
          failureThreshold: 1
          httpGet:
            path: /github-runner-provisioner/healthz
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 1
          httpGet:
            path: /github-runner-provisioner/healthz
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 1000m
          requests:
            cpu: 50m
            memory: 300Mi
      volumes:
        # Provide the name of the ConfigMaps containing the files you want
        # to add to the container
        - name: code-root
          configMap:
            name: code-root
        - name: internal-aws
          configMap:
            name: internal-aws
        - name: internal-monitoring
          configMap:
            name: internal-monitoring
        - name: internal-utils
          configMap:
            name: internal-utils
        - name: github-runner-provisioner-aws-config
          secret:
            secretName: github-runner-provisioner-aws-config

---

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: github-runner-provisioner
  labels:
    app: github-runner-provisioner
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: github-runner-provisioner

---

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: github-runner-provisioner
  labels:
    app: prometheus
spec:
  namespaceSelector:
    matchNames:
      - infra
  selector:
    matchLabels:
      app: github-runner-provisioner
  endpoints:
    - targetPort: 8080
      path: /metrics

---

apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: github-runner-provisioner
  labels:
    app: prometheus
spec:
  groups:
    - name: github-runner-provisioner
      rules:
        - alert: "GitHub runner provisioner"
          expr: sum by(repo, runner_label) (increase(action_runner_provisioning_errors{error="availability_check_error"}[2m])) > 0
          labels:
            severity: warning
          annotations:
            summary: 'Error verifying if there are runners with label ''{{ $labels.runner_label }}''. This can affect builds in the ''{{ $labels.repo }}'' repository.'
            link: 'https://www.notion.so/datawire/Runbook-Infra-Actions-4ce5640bde494304a039779727be2c0d'
        - alert: "GitHub runner provisioner"
          expr: sum by(repo, runner_label) (increase(action_runner_provisioning_errors{error="runner_creation_error"}[2m])) > 0
          labels:
            severity: warning
          annotations:
            summary: "Error provisioning a GitHub runner with label {{ $labels.runner_label }}. This can affect builds in the '{{ $labels.repo }}' repository."
            link: 'https://www.notion.so/datawire/Runbook-Infra-Actions-4ce5640bde494304a039779727be2c0d'
