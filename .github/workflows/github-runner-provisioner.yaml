name: "GitHub Runner Provisioner: Tests, Builds, Deployments"
on:
  pull_request:
    paths:
      - .github/workflows/github-runner-provisioner.yaml
      - github-runner-provisioner

jobs:
  go_test:
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: FAKE_TOKEN
      CODEMAGIC_TOKEN: FAKE_TOKEN
      WEBHOOK_TOKEN: FAKE_TOKEN
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v4
        with:
          go-version: '1.18'
      - name: Run tests
        run: |
          cd github-runner-provisioner
          go test ./...

  mock_traffic_test:
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: FAKE_TOKEN
      CODEMAGIC_TOKEN: FAKE_TOKEN
      WEBHOOK_TOKEN: FAKE_TOKEN
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v2
      - run: cd github-runner-provisioner
      - name: Build for Test
        uses: docker/build-push-action@v2
        with:
          context: "{{defaultContext}}:github-runner-provisioner"
          file: dockerfile
          platforms: linux/amd64
          push: false
          tags: |
            datawiredev/github-runner-provisioner:${{ github.sha }}
          outputs: type=docker, dest=/tmp/github-runner-provisioner.tar
      - name: Test CodeMagic
        run: |
          cd github-runner-provisioner
          docker load --input /tmp/github-runner-provisioner.tar
          docker run -d --name=github-runner-provisioner-codemagic -p 8080:8080 \
            -e GITHUB_TOKEN=${GITHUB_TOKEN} \
            -e CODEMAGIC_TOKEN=${CODEMAGIC_TOKEN} \
            -e WEBHOOK_TOKEN=${WEBHOOK_TOKEN} \
            -e USE_CODEMAGIC="true" \
            datawiredev/github-runner-provisioner:${{ github.sha }}
          response_code=$(make test-macOS-arm64 HOSTNAME=http://localhost:8080 DRY_RUN=true | tail -n 1)
          docker stop github-runner-provisioner-codemagic
          echo "Response code: $response_code\n\n"
          echo "Container logs:"
          docker logs github-runner-provisioner-codemagic 
          if [ "$response_code" != "200" ]; then
            echo "\nTest failed"
            exit 1
          fi
      - name: Test AWS
        run: |
          cd github-runner-provisioner
          docker load --input /tmp/github-runner-provisioner.tar
          docker run -d --name=github-runner-provisioner-aws -p 8080:8080 \
            -e GITHUB_TOKEN=${GITHUB_TOKEN} \
            -e CODEMAGIC_TOKEN=${CODEMAGIC_TOKEN} \
            -e WEBHOOK_TOKEN=${WEBHOOK_TOKEN} \
            -e USE_CODEMAGIC="false" \
            datawiredev/github-runner-provisioner:${{ github.sha }}
          failed=false
          response_code_macOS=$(make test-macOS-arm64 HOSTNAME=http://localhost:8080 DRY_RUN=true | tail -n 1)
          echo "Response code: $response_code_macOS\n\n"
          failed=$failed || [ "$response_code_macOS" != "200" ]
          response_code_ubuntu=$(make test-ubuntu-arm64 HOSTNAME=http://localhost:8080 DRY_RUN=true | tail -n 1)
          echo "Response code: $response_code_ubuntu\n\n"
          failed=$failed || [ "$response_code_ubuntu" != "200" ]
          docker stop github-runner-provisioner-aws
          echo "Container logs:"
          docker logs github-runner-provisioner-aws 
          if [ "$failed" = true ]; then
            echo "\nTest failed"
            exit 1
          fi
          

  build:
    runs-on: ubuntu-22.04
    needs: [go_test, mock_traffic_test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - run: cd github-runner-provisioner
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            datawiredev/github-runner-provisioner:${{ github.sha }}

  deploy:
    runs-on: ubuntu-22.04
    #needs: build
    #github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Update Kustomize
        env:
          INFRA_ACTIONS_SHA: ${{ github.sha }}
        run: |
          cd github-runner-provisioner
          envsubst < kustomization.yaml.in > kustomization.yaml
          git config user.email "dev@datawire.io"
          git config user.name "d6e-automaton"
          git add -A 
          git status
          cat kustomization.yaml
          echo "Updating manifests with image version ${INFRA_ACTIONS_SHA} and pushing to branch ${branch}"
        #  git commit -m "Deploying updated manifest to ${INFRA_ACTIONS_SHA} [skip ci]"
        #  git push --set-upstream origin ${branch}
